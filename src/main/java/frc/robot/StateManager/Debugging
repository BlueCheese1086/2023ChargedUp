import java.util.Arrays;

public class MyClass {
    
    
    public static final class ElevatorConstants {
        
        public static final int leftID = 0;
        public static final int rightID = 0;
        
        public static final int bottomSwitchID = 0;

        public static final double GEARBOX_RATIO = 11.25;

        public static final double SPOOL_RADIUS = 0.0381;

        public static final double MAX_HEIGHT = 1.651;

        public static final double TOWER_ANGLE_OFFSET = Math.toRadians(10);

        public static final double kP = 0.0;
        public static final double kI = 0.0;
        public static final double kD = 0.0;
        public static final double kFF = 0.0;

    }

    public static final class ArmConstants {

        public static final int armId = 0;

        public static final double GEARBOX_RATIO = 25;

        /**
         * Meters
         */
        public static final double ARM_LENGTH = 1;

        // Arm MAX angle limit
        public static final double UPPER_LIMIT = Math.toRadians(45);
        // Arm Starting angle
        public static final double STARTING_ANGLE = 0.0;
        // Arm MIN angle limit
        public static final double LOWER_LIMIT = Math.toRadians(-45);

        public static final double kP = 0.0;
        public static final double kI = 0.0;
        public static final double kD = 0.0;
        public static final double kFF = 0.0;

    }
    
    private static final double MAX_HEIGHT = ElevatorConstants.MAX_HEIGHT;
	private static final double MAX_ANGLE = ArmConstants.UPPER_LIMIT;

	private static final double ELEVATOR_ANGLE = ElevatorConstants.TOWER_ANGLE_OFFSET;
	private static final double ARM_LENGTH = ArmConstants.ARM_LENGTH;

	private static final double ELEVATOR_STEP = 1.0 / 42 * (ElevatorConstants.SPOOL_RADIUS * 2 * Math.PI / ElevatorConstants.GEARBOX_RATIO);
	private static final double ARM_STEP = 1.0 / 42 * (Math.toRadians(360) / ArmConstants.GEARBOX_RATIO);

	private static double currentHeight = 0;
	private static double currentAngle = 0;
    
    public static void main(String args[]) {
        
        //System.out.println(ELEVATOR_STEP);
        //System.out.println(ARM_STEP);
        
      System.out.println(Arrays.toString(iterate(.1, .5)));
    }
    
    public static double[] iterate(double x, double y) {
        
		double closestU = 0.0;
		double closestA = 0.0;
		
		EndState closest = new EndState(0, 0, x, y);
		EndState current = new EndState(0, 0, x, y);
		double change = 0.0;
		
		double a = 0.0;
		double u = 0.0;
		
		do {
		    change = 0;
		    for (int i = -1; i <= 1; i++) {
		        current = new EndState(u, a + i*ARM_STEP, x, y);
		        if (current.d < closest.d) {
		            change = current.d - closest.d;
		            closest = current;
		            a = a + i*ARM_STEP;
		        }
		    }
		} while (change < 0.0);
		
		do {
			change = 0;
			for (int i = -1; i <= 1; i++) {
				for (int j = -1; j <= 1; j++) {
					current = new EndState(u + i*ELEVATOR_STEP, a + j*ARM_STEP, x, y);
					if (current.d < closest.d) {
						u = u + i * ELEVATOR_STEP;
						a = a + j * ARM_STEP;
						closest = current;
					}
				}
			}
		} while (change < 0);
		
	    System.out.println(closest);
		
		return new double[]{closestU, Math.toDegrees(closestA)};
	}
	
	public static double[] getEndPosition(double h, double a) {
		return new double[] {
				h * Math.sin(ELEVATOR_ANGLE) + ARM_LENGTH * Math.cos(a),
				h * Math.cos(ELEVATOR_ANGLE) + ARM_LENGTH * Math.sin(a)
		};
	}

	public static double distance(double x, double y, double x1, double y1) {
		return Math.sqrt(Math.pow(x1 - x, 2) + Math.pow(y1 - y, 2));
	}
	
	public static class EndState {
	    
	    public double u;
	    public double a;
	    
	    public double d;
	    
	    public EndState(double u, double a, double x, double y) {
            this.u = u;
            this.a = a;
            double[] t = getEndPosition(u, a);
            this.d = distance(t[0], t[1], x, y);
	    }
	    
	    public EndState closer(EndState in) {
	        if (this.d < in.d) return this;
	        return in;
	    }
	    
	    public String toString() {
	        return "A: " + Math.toDegrees(a) + " H: " + u + " D: " + d;
	    }
	    
	}
}